# 关于测试用例的问题

## 错误处理的时机
在测试`test/prog10.yo`中，答案在停止运行之前是
```
- PC: 12
  REG:
    rax: 1
    rcx: 0
    rdx: 0
    rbx: 0
    rsp: -8
    rbp: 0
    rsi: 0
    rdi: 0
    r8: 0
    r9: 0
    r10: 0
    r11: 0
    r12: 0
    r13: 0
    r14: 0
  MEM:
    0: 127024
    8: 27038778780745728
    16: 192560
    24: 16914579456
  CC:
    ZF: 1
    SF: 0
    OF: 0
  STAT: 3
```
但我觉得应该是
```
{
    "PC": 12,
    "REG": {
        "rax": 1,
        "rcx": 0,
        "rdx": 0,
        "rbx": 0,
        "rsp": 0,
        "rbp": 0,
        "rsi": 0,
        "rdi": 0,
        "r8": 0,
        "r9": 0,
        "r10": 0,
        "r11": 0,
        "r12": 0,
        "r13": 0,
        "r14": 0
    },
    "CC": {
        "ZF": 1,
        "SF": 0,
        "OF": 0
    },
    "STAT": 3,
    "MEM": {
        "0": 127024,
        "8": 27038778780745728,
        "16": 192560,
        "24": 16914579456
    }
}
```
顺序实现中，访问内存在写回reg之前，所以应该是先压栈，再改变`rsp`。
根据CSAPP 4.1.4 节的描述，当 

>遇到异常的时候, 我们简单地让处理器停止运行

而内存错误出现在压栈时，处理器就应该停止运行了，`rsp`不应该改才对吧？^[事实上，我们的实现会让错误在发生时被立即抛出，而不是等待一个循环结束。]还是说我有哪里理解错了

## `rsp`允许的范围

在程序`test/cjr.yo`中，指令在内存中的最大地址达到了`0x42`，但`rsp`被设置成从`0x40`开始向下增长，请问栈帧增长到了指令内存中是允许的吗？

